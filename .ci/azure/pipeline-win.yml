jobs:
- job: 'Windows_CI'
  pool:
    vmImage: 'vs2017-win2016'
  timeoutInMinutes: 75
  variables:
      PYMOR_HYPOTHESIS_PROFILE: ci
  strategy:
    matrix:
      Python37:
        python.version: '3.7'
      Python39:
        python.version: '3.9'
    maxParallel: 4

  steps:
  - script: |
        curl --output mesa.7z -L https://github.com/pal1000/mesa-dist-win/releases/download/20.1.1-2/mesa3d-20.1.1-release-mingw.7z
        7z x mesa.7z -omesa -y

        # The script requires user input (choice of options) so need to
        # fiddle to get it to run automatically. Not a clean way to do it,
        # but works.
        sed -i 's/@echo Please make a deployment choice:/@GOTO desktopgl/g' mesa\systemwidedeploy.cmd
        sed -i 's/@echo Desktop OpenGL drivers deploy complete./@exit/g' mesa\systemwidedeploy.cmd
        mesa\systemwidedeploy.cmd
    displayName: download MESA

  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH

  - script: conda update -n base -c defaults conda
    displayName: Create Anaconda environment
  - script: conda create --yes --name myEnvironment
    displayName: Create Anaconda environment
  - script: |
      call activate myEnvironment
      conda install -v -c conda-forge --yes --name myEnvironment python=$(python.version) numpy pip
    displayName: Conda 1/4
  - script: |
      call activate myEnvironment
      conda install -v -c conda-forge --yes --name myEnvironment --only-deps pymor
    displayName: Conda 2/4
  - script: |
      call activate myEnvironment
      conda install -v -c conda-forge --yes --name myEnvironment pyopengl cython pyevtk slycot cython pytest pytest-cov curl hypothesis pyside2
    displayName: Conda 3/4
  - script: |
      call activate myEnvironment
      conda remove -c conda-forge --yes qtpy qt.py
    displayName: Conda 4/4

  - script: |
      call activate myEnvironment
      python -c "import numpy"
      python -c "import OpenGL.GL as gl; print(gl.glGetString(gl.GL_RENDERER))"
      python -c "import OpenGL.GL as gl; print(gl.glGetString(gl.GL_VERSION))"
      python setup.py build_ext -i
      pip install qt.py==1.3.3 pytest-azurepipelines pytest-datadir
      set QT_VERBOSE=1
      set QT_PREFERRED_BINDING=PySide2;PyQt5
      set QT_DEBUG_PLUGINS=1
      python -c "from PySide2.QtWidgets import QApplication, QLabel, QLineEdit; print(QLabel)"
      python -c "import Qt;print(Qt.__binding__)"
    displayName: 'Sanity Checks'


  - script: |
      call activate myEnvironment
      set PYTHONPATH=%PYTHONPATH%;%cd%\src
      py.test --cov --cov-config=setup.cfg --cov-context=test --junitxml=test_results.xml --hypothesis-profile $(PYMOR_HYPOTHESIS_PROFILE)

  - script: |
      choco install codecov
      coverage xml
      codecov.exe -f coverage.xml
    displayName: 'Upload to codecov.io'
  - publish: src/pymortests/testdata/check_results/
    artifact: changed_results_win_$(python.version)
    condition: always()
